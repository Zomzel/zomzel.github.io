<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/Zomzel/zomzel.github.io/2024/04/26/Docker/"/>
    <url>/Zomzel/zomzel.github.io/2024/04/26/Docker/</url>
    
    <content type="html"><![CDATA[<h3 id="容器的介绍"><a href="#容器的介绍" class="headerlink" title="容器的介绍"></a>容器的介绍</h3><ul><li>容器化技术，它是一种虚拟化技术，用于在计算机系统中隔离和运行应用程序。容器将应用程序及其所有依赖项打包到一个独立的、可移植的环境中，使其能够在不同的计算机或操作系统上运行。</li><li>容器的特点：隔离性、轻量级、可移植性、弹性伸缩、生态系统。</li></ul><h3 id="Docker的技术架构"><a href="#Docker的技术架构" class="headerlink" title="Docker的技术架构"></a>Docker的技术架构</h3><img src="/Zomzel/zomzel.github.io/Zomzel/2024/04/26/Docker/docker_struct.png" class="" title="Docker技术架构"><ol><li>Docker客户端(Client)： Docker 客户端是用户与 Docker 交互的命令行工具或图形界面工具。用户可以使用 Docker 客户端发送命令和指令，例如构建镜像、创建容器、启动容器等。Docker 客户端与 Docker 主机进行通信，通过 API 接口或者 Docker 配置文件进行交互。常见的 Docker 客户端包括 Docker CLI（命令行界面）和 Docker Dashboard（图形用户界面）。</li><li>Docker主机(Docker Host)： Docker 主机是安装和运行 Docker 引擎的物理或虚拟机器。它负责管理容器的创建、启动、停止和销毁等生命周期操作。Docker 主机上运行着 Docker 引擎，它接收来自 Docker 客户端的指令，并执行相应的操作。Docker 主机上可以同时运行多个容器，并提供了资源隔离、网络管理和存储管理等功能。</li><li>镜像仓库（Registry）： 镜像仓库是用于存储和分发 Docker 镜像的中央仓库。镜像仓库允许用户上传、下载和共享镜像。当用户在 Docker 主机上创建镜像时，可以选择将镜像推送到镜像仓库中，以便其他人可以使用这个镜像。Docker Hub 是官方提供的公共镜像仓库，用户可以从中获取各种常用的镜像。除了 Docker Hub，还有一些私有和第三方的镜像仓库可供选择，例如 Harbor、Azure Container Registry 等。</li></ol><p>在整个架构中，Docker 客户端与 Docker 主机通过 API 接口进行通信，Docker 主机负责管理容器的运行和资源隔离。镜像仓库则是存储和分享镜像的中央仓库，用户可以从中拉取镜像或将自己创建的镜像推送至其中。这样，Docker 技术架构实现了应用程序的打包、分发和部署，提供了一种便捷、可移植和可扩展的容器化环境。</p><h3 id="容器的工作机制-Docker"><a href="#容器的工作机制-Docker" class="headerlink" title="容器的工作机制(Docker)"></a>容器的工作机制(Docker)</h3><img src="/Zomzel/zomzel.github.io/Zomzel/2024/04/26/Docker/work.png" class="" title="容器工作机制"><ol><li>Docker 客户端（Docker Client）：Docker 客户端是用户与 Docker 交互的命令行工具或 GUI 工具。它向 Docker 引擎发送指令，如拉取镜像、创建容器、启动容器等。</li><li>Docker 引擎（Docker Engine）：Docker 引擎是 Docker 的核心组件，负责管理容器的生命周期，包括创建、启动、停止、删除等操作。它还提供了一组 API 接口和命令行工具，供用户与 Docker 进行交互。</li><li>容器（Container）：容器是从容器镜像创建的运行实例。它是一个独立的、隔离的执行环境，其中应用程序可以在其中运行。容器具有自己的文件系统、网络和进程空间，但与主机系统是隔离的。<br>Docker 客户端和 Docker 引擎是分离的两个组件，Docker 客户端发送指令给 Docker 引擎，Docker 引擎执行指令并管理容器的生命周期。容器则是从容器镜像创建的运行实例，它具有隔离性、资源管理和网络管理等特性，使得应用程序可以在一个独立且可移植的环境中运行。</li></ol><h3 id="容器的关键技术："><a href="#容器的关键技术：" class="headerlink" title="容器的关键技术："></a>容器的关键技术：</h3><h4 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h4><p>Namespace是Linux内核对系统资源进行隔离和虚拟化的特性，这些系统资源包括：</p><ul><li><p>PID ：PID 命名空间提供了进程 ID 的隔离。</p></li><li><p>User：User 命名空间提供了用户和用户组的隔离。</p></li><li><p>UTS：UTS 命名空间提供了主机名和域名的隔离。</p></li><li><p>IPC：IPC 命名空间提供了进程间通信（IPC）资源的隔离，如共享内存、信号量和消息队列等。</p></li><li><p>Net：Net 命名空间提供了网络资源的隔离，包括网络接口、IP 地址、路由表和网络命名空间等。</p></li><li><p>Mnt：Mnt 命名空间提供了文件系统挂载点的隔离。<br>namespace隔离说明</p><blockquote><p>以交互模式启动一个centos容器，并在其中运行&#x2F;bin&#x2F;bash程序。执行ps命令查看到“&#x2F;bin&#x2F;bash”是PID&#x3D;1的进程，即docker将其隔离于宿主机中的其他进程</p></blockquote></li></ul><h4 id="Cgroup"><a href="#Cgroup" class="headerlink" title="Cgroup"></a>Cgroup</h4><p><strong>Cgroups：Linux Control Group</strong></p><ul><li><p>作用：限制一个进程组对系统资源的使用上限，包括CPU、内存、Block I&#x2F;O等</p></li><li><p>Cgroups还能设置进程优先级，对进程进行挂起和恢复等操作</p></li><li><p>原理：将一组进程放在一个Cgroup中，通过给这个Cgroup分配指定的可用资源，达到控制这一组进程可用资源的目的</p></li><li><p>实现：在Linux中，Cgroups以文件和目录的方式组织在操作系统的&#x2F;sys&#x2F;fs&#x2F;Cgroup路径下。该路径中所有的资源种类均可被Cgroup限制</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络问题锦集</title>
    <link href="/Zomzel/zomzel.github.io/2024/04/13/%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98%E9%94%A6%E9%9B%86/"/>
    <url>/Zomzel/zomzel.github.io/2024/04/13/%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98%E9%94%A6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<img src="/Zomzel/zomzel.github.io/Zomzel/2024/04/13/%E7%BD%91%E7%BB%9C%E9%97%AE%E9%A2%98%E9%94%A6%E9%9B%86/problems.png" class="" title="sdu_no_net总结"><h3 id="上不了网的问题可以总结为如下问题："><a href="#上不了网的问题可以总结为如下问题：" class="headerlink" title="上不了网的问题可以总结为如下问题："></a>上不了网的问题可以总结为如下问题：</h3><ol><li>网络连不上<br> 网络需要认证，认证后还是无法上网，可以注销重新认证试试。</li><li>网络能连上，但是上不了网<ul><li>检查代理关了没</li><li>ipv6换ipv4试试（山大校园网群友亲测有效），在网络适配器属性里禁用ipv6.</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验报告</title>
    <link href="/Zomzel/zomzel.github.io/2024/03/22/%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <url>/Zomzel/zomzel.github.io/2024/03/22/%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<img src="/Zomzel/zomzel.github.io/Zomzel/2024/03/22/%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/funingna2.jpg" class="" title="图片引用方法一"><h2 id="实验题目：利用主流云平台搭建个人博客或网站"><a href="#实验题目：利用主流云平台搭建个人博客或网站" class="headerlink" title="实验题目：利用主流云平台搭建个人博客或网站"></a>实验题目：利用主流云平台搭建个人博客或网站</h2><h3 id="实验学时：2实验日期：-2024-3-22"><a href="#实验学时：2实验日期：-2024-3-22" class="headerlink" title="实验学时：2实验日期：    2024&#x2F;3&#x2F;22"></a>实验学时：2实验日期：    2024&#x2F;3&#x2F;22</h3><h3 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a>实验目的：</h3><ul><li>熟悉使用主流云平台并搭建个人博客或者网站。</li><li>具体包括：github， 阿里云， 腾讯云等</li><li>参考方案：基于主流云平台，设计、实现个人博客或者网站的搭建，撰写实验报告（附带网站链接并可以访问），并在网站上呈现此次实验报告。</li></ul><h3 id="硬件环境："><a href="#硬件环境：" class="headerlink" title="硬件环境："></a>硬件环境：</h3><ul><li>联网的计算机一台</li></ul><h3 id="软件环境："><a href="#软件环境：" class="headerlink" title="软件环境："></a>软件环境：</h3><ul><li>Windows or Linux</li></ul><h3 id="实验步骤与内容："><a href="#实验步骤与内容：" class="headerlink" title="实验步骤与内容："></a>实验步骤与内容：</h3><p>本次实验基于github pages和hexo搭建个人博客网站。最终成果觉解是明 (zomzel.github.io)</p><h4 id="首先在github上创建一个新的代码仓库用于保存博客网页。"><a href="#首先在github上创建一个新的代码仓库用于保存博客网页。" class="headerlink" title="首先在github上创建一个新的代码仓库用于保存博客网页。"></a>首先在github上创建一个新的代码仓库用于保存博客网页。</h4><ul><li>仓库名为zomzel.github.io。后缀名必须为github.io，在github pages可以看到访问网址为觉解是明 (zomzel.github.io）此时github pages的内容为空，需要借助hexo搭建个人博客。Hexo是一个基于nodejs的静态博客网站生成器，不需要开发，只需要一些必要的配置即可生成一个个性化的博客网站。</li></ul><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h4 id="创建一个项目hexo-blog并初始化"><a href="#创建一个项目hexo-blog并初始化" class="headerlink" title="创建一个项目hexo-blog并初始化"></a>创建一个项目hexo-blog并初始化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init hexo-blog<br>$ <span class="hljs-built_in">cd</span> hexo-blog<br>$ npm install<br></code></pre></td></tr></table></figure><h4 id="通过hexo-g和hexo-s命令启动，访问http-localhost-4000可以看到默认的主页风格。"><a href="#通过hexo-g和hexo-s命令启动，访问http-localhost-4000可以看到默认的主页风格。" class="headerlink" title="通过hexo g和hexo s命令启动，访问http://localhost:4000可以看到默认的主页风格。"></a>通过hexo g和hexo s命令启动，访问<a href="http://localhost:4000可以看到默认的主页风格。">http://localhost:4000可以看到默认的主页风格。</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><h4 id="修改hexo配置文件-config-yml"><a href="#修改hexo配置文件-config-yml" class="headerlink" title="修改hexo配置文件_config.yml"></a>修改hexo配置文件_config.yml</h4><ul><li>可以自定义主题,在官网可以找到更多不同风格的主题，下载解压到项目的theme目录下，然后将配置文件中的theme键值对内容改成对应主题的名称即可更换主题风格。</li></ul><h4 id="创建主题页，首次使用主题的关于页需要手动创建。"><a href="#创建主题页，首次使用主题的关于页需要手动创建。" class="headerlink" title="创建主题页，首次使用主题的关于页需要手动创建。"></a>创建主题页，首次使用主题的关于页需要手动创建。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new page about<br></code></pre></td></tr></table></figure><ul><li>创建成功后编辑博客目录下&#x2F;source&#x2F;about&#x2F;index.md，添加layout属性为about</li></ul><h4 id="创建实验报告博客页"><a href="#创建实验报告博客页" class="headerlink" title="创建实验报告博客页"></a>创建实验报告博客页</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ Hexo new page 实验报告<br></code></pre></td></tr></table></figure><ul><li>使用markdown语言编写对应资源文件夹下的md文件即可修改文件内容，刷新网页个人博客也会对应更新。</li></ul><h4 id="将个人博客部署到github"><a href="#将个人博客部署到github" class="headerlink" title="将个人博客部署到github"></a>将个人博客部署到github</h4><ul><li>Npm命令安装hexo-deployer-git,修改_config.yml中关于github的配置信息。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">deploy:<br>  type: git<br>  repo: https:<span class="hljs-comment">//github.com/zomzel.github.io.git</span><br>  branch: main<br></code></pre></td></tr></table></figure><ul><li>这一步通过token进行部不成功，换成用ssh密钥进行连接的方式后成功，即在本地生成一对密钥，在github上配置公钥，然后在本地添加每次连接github所需要的私钥即可。</li></ul><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g -d<br></code></pre></td></tr></table></figure><ul><li>浏览器访问觉解是明 (zomzel.github.io)，部署成功</li></ul><h3 id="结论分析与体会："><a href="#结论分析与体会：" class="headerlink" title="结论分析与体会："></a>结论分析与体会：</h3><ul><li>本次实验通过使用github pages和hexo的自动个人博客搭建，让我体会到了借助云平台搭建一个个人博客不是一件麻烦的事。<br>此次搭建的我的个人博客为觉解是明 (zomzel.github.io)，可以正常访问</li></ul>]]></content>
    
    
    <categories>
      
      <category>云计算</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/Zomzel/zomzel.github.io/2024/03/22/hello-world/"/>
    <url>/Zomzel/zomzel.github.io/2024/03/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
